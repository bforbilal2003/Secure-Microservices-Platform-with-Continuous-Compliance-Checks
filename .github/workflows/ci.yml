name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      ECR_REPO_AUTH: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/auth
      ECR_REPO_BILLING: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/billing
      ECR_REPO_PRODUCT: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/product

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies and run tests (auth)
      run: |
        pip install -r services/auth/requirements.txt
        python -m unittest discover services/auth/tests
      env:
        PYTHONPATH: services/auth

    - name: Install dependencies and run tests (billing)
      run: |
        pip install -r services/billing/requirements.txt
        python -m unittest discover services/billing/tests
      env:
        PYTHONPATH: services/billing

    - name: Install dependencies and run tests (product)
      run: |
        pip install -r services/product/requirements.txt
        python -m unittest discover services/product/tests
      env:
        PYTHONPATH: services/product

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Log in to AWS ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_AUTH

    # Install Trivy
    - name: Install Trivy
      run: |
        curl -s https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo bash

    # Scan Docker image for vulnerabilities (auth)
    - name: Scan Docker image for vulnerabilities (auth)
      run: |
        trivy image $ECR_REPO_AUTH:latest

    # Scan Docker image for vulnerabilities (billing)
    - name: Scan Docker image for vulnerabilities (billing)
      run: |
        trivy image $ECR_REPO_BILLING:latest

    # Scan Docker image for vulnerabilities (product)
    - name: Scan Docker image for vulnerabilities (product)
      run: |
        trivy image $ECR_REPO_PRODUCT:latest

    # Install Snyk
    - name: Install Snyk
      run: |
        npm install -g snyk

    # Test dependencies with Snyk (auth)
    - name: Test dependencies with Snyk (auth)
      run: |
        snyk test services/auth

    # Test dependencies with Snyk (billing)
    - name: Test dependencies with Snyk (billing)
      run: |
        snyk test services/billing

    # Test dependencies with Snyk (product)
    - name: Test dependencies with Snyk (product)
      run: |
        snyk test services/product

    # Build and Push Docker Images
    - name: Build and Push Docker Images
      run: |
        docker build -t auth ./services/auth
        docker tag auth $ECR_REPO_AUTH:latest
        docker push $ECR_REPO_AUTH:latest

        docker build -t billing ./services/billing
        docker tag billing $ECR_REPO_BILLING:latest
        docker push $ECR_REPO_BILLING:latest

        docker build -t product ./services/product
        docker tag product $ECR_REPO_PRODUCT:latest
        docker push $ECR_REPO_PRODUCT:latest
